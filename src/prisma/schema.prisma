// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String @id @default(auto()) @map("_id") @db.ObjectId
  email         String? @unique @default("temp@nameless.nyc")
  phone         String? @unique
  username      String? @unique
  name          String?
  lastName      String?
  walletAddress String  @unique
  privateKey    String  @unique
  password      String
  accounts      Json?
  external_accounts   Json?
  created       DateTime @default(now())
  pfpAddress    Json?

  eventIDs String[] @db.ObjectId
  events   Event[]  @relation(fields: [eventIDs], references: [id])

  rewardIDs String[] @db.ObjectId
  rewards   Reward[] @relation(fields: [rewardIDs], references: [id])


}

model Event {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  url_endpoint   String @unique
  name           String
  date           String
  startTime      String
  endTime        String?
  tz             String
  type           String?
  location       String
  location_url   String?
  venue          String?
  venue_url      String?
  imgUrl         String?
  description    String
  lockAddress    String?
  priceUSD       Float
  email_template String
  cardColor      String
  
  ticketProvider Json?
  iframe_url    String?


  ticketTiers    Json?
  vendors        Vendor[]

  rewards        Json?
  iframe_url     String?

  userIDs String[] @db.ObjectId
  users   User[]   @relation(fields: [userIDs], references: [id])

  promoCodeIDs String[]     @db.ObjectId
  promoCodes   PromoCodes[] @relation(fields: [promoCodeIDs], references: [id])
}

type Ticket {
  name String
  available Float
  priceUSD Float
  lockAddress String
}

type Vendor {
  name      String
  instagram String
  website   String?
}

model PromoCodes { 
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  code    String
  percent Boolean
  amount  Float
  expiryDate String?

  eventIDs String[] @db.ObjectId
  events   Event[]  @relation(fields: [eventIDs], references: [id])
}

model KYD_User {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  email   String
  phone   String
  wallet_address String
}

model Reward {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  name        String?
  description String?
  imgUrl      String?
  metadataUrl String?

  chain       String
  address     String
  collection  String?

  userIDs String[] @db.ObjectId
  users   User[]   @relation(fields: [userIDs], references: [id])
}

model Accounts {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    name        String
    account_id  String @unique
    email       String @unique
    scanner_pin String
}